---

- name: Create directories
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'directory'
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rwx,g=rx,o=rx'
  loop:
    - '{{ app_cas_config_dir }}'

- name: Template the bash functions file
  ansible.builtin.template:
    src: 'helpers.sh'
    dest: '{{ app_cas_helper_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  vars:
    entry_name: '{{ app_cas_name }}'
    entry_java: '{{ app_cas_java }}'
    entry_builder: '{{app_cas_builder }}'
    entry_working_dir: '{{ app_cas_source_dir }}'
    entry_java_sys_props: '{{ app_cas_java_sys_props }}'
    entry_java_jvm_opts: '{{ app_cas_java_jvm_opts }}'
    entry_env_vars: '{{ app_cas_env_vars }}'
    entry_java_artifact_name: 'target/cas-exec.war'
    entry_is_service: true

- name: Template the nginx conf
  ansible.builtin.template:
    src: 'entry-nginx.conf'
    dest: '{{ app_cas_entry_nginx_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  vars:
    entry_name: '{{ app_cas_name }}'
    entry_ports: '{{ app_cas_ports }}'
    entry_working_dir: '{{ app_cas_source_dir }}'

- name: Template the nginx html
  ansible.builtin.template:
    src: 'entry-index.html'
    dest: '{{ app_cas_entry_html_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'
  vars:
    entry_group: '{{ app_cas_group }}'
    entry_category: '{{ app_cas_category }}'
    entry_name: '{{ app_cas_name }}'
    entry_ports: '{{ app_cas_ports }}'
    entry_links: '{{ app_cas_links }}'

- name: Template the systemd unit file
  ansible.builtin.template:
    src: 'app-systemd.service'
    dest: '{{ app_cas_systemd_service_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  notify:
    - Systemd daemon reload
  vars:
    entry_name: '{{ app_cas_name }}'
    entry_java: '{{ app_cas_java }}'
    entry_config_path: '{{ app_cas_config_path }}'
    entry_working_dir: '{{ app_cas_source_dir }}'
    entry_builder: '{{app_cas_builder }}'
    entry_java_sys_props: '{{ app_cas_java_sys_props }}'
    entry_java_jvm_opts: '{{ app_cas_java_jvm_opts }}'
    entry_env_vars: '{{ app_cas_env_vars }}'
    entry_debug_port: '{{ specified_ports.cas_debug_port }}'

- name: Template the config file
  ansible.builtin.template:
    src: 'application.yml'
    dest: '{{ app_cas_config_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'

- name: Template the pwe config file
  ansible.builtin.template:
    src: 'pwe.properties'
    dest: '{{ app_cas_config_pwe_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'

- name: Template the log4j config file
  ansible.builtin.template:
    src: 'log4j2.xml'
    dest: '{{ app_cas_log4j2_config_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'

- name: Template the tomcat logging config file
  ansible.builtin.template:
    src: 'logging.properties'
    dest: '{{ app_cas_tomcat_logging_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'

- name: Ensure mysql databases exist for cas
  community.mysql.mysql_db:
    login_host: '{{ local_host }}'
    login_port: '{{ specified_ports.mysql_service_port }}'
    login_user: '{{ mysql_service_root_username }}'
    login_password: '{{ mysql_service_root_password }}'
    name: '{{ item }}'
    state: 'present'
  loop:
    - '{{ app_cas_mysql_db_main_database }}'
    - '{{ app_cas_mysql_db_test_database }}'

- name: Ensure mysql users exist for cas
  community.mysql.mysql_user:
    login_host: '{{ local_host }}'
    login_port: '{{ specified_ports.mysql_service_port }}'
    login_user: '{{ mysql_service_root_username }}'
    login_password: '{{ mysql_service_root_password }}'
    name: '{{ item.username }}'
    host: '%'
    plugin: 'caching_sha2_password'
    plugin_auth_string: '{{ item.password }}'
    priv: '{{ item.database }}.*:ALL'
    column_case_sensitive: true
    state: 'present'
  loop:
    - database: '{{ app_cas_mysql_db_main_database }}'
      username: '{{ app_cas_mysql_db_main_username }}'
      password: '{{ app_cas_mysql_db_main_password }}'
    - database: '{{ app_cas_mysql_db_test_database }}'
      username: '{{ app_cas_mysql_db_test_username }}'
      password: '{{ app_cas_mysql_db_test_password }}'

- name: Ensure mongodb users exist and can access mongodb databases
  community.mongodb.mongodb_user:
    login_database: '{{ mongo_service_auth_database }}'
    login_host: '{{ local_host }}'
    login_password: "{{ mongo_service_root_password }}"
    login_port: '{{ specified_ports.mongo_service_port }}'
    login_user: '{{ mongo_service_root_username }}'
    auth_mechanism: '{{ mongo_service_auth_mechanism }}'
    database: '{{ mongo_service_auth_database }}'
    name: '{{ item.user }}'
    password: "{{ item.pass }}"
    roles: '{{ item.roles }}'
    state: present
  loop:
    - database: "{{ app_cas_mongo_db_main_database }}"
      user: "{{ app_cas_mongo_db_main_username }}"
      pass: "{{ app_cas_mongo_db_main_password }}"
      roles:
        - db: '{{ app_cas_mongo_db_main_database }}'
          role: 'readWrite'
    - database: "{{ app_cas_mongo_db_spring_data_database }}"
      user: "{{ app_cas_mongo_db_spring_data_username }}"
      pass: "{{ app_cas_mongo_db_spring_data_password }}"
      roles:
        - db: '{{ app_cas_mongo_db_spring_data_database }}'
          role: 'readWrite'

# Set up java keystore, to provide SSL cert, so CAS will start.
# It seems like an SSL cert is required even in local dev,
# because the spring security config includes .requireSecure() (cas & casmgmt)
# and does not have an obvious way to disable.

# Note that the idea is to generate a keypair (public & private keys) in a new java keystore.
# Then export the public key and import the public key into the system keystore (cacerts)
# so that the system trusts the SSL cert.
# Specify the path to the new keystore in the cas and cas mgmt config.

- name: Generate CAS self-signed SSL cert using Java 11 keytool
  become_user: 'vagrant'
  ansible.builtin.command:
    cmd: >
      {{ java_11_keytool_path }}
      -genkeypair
      -alias 'cas'
      -keyalg 'RSA'
      -keypass '{{ app_cas_java_keystore_secret }}'
      -storepass '{{ app_cas_java_keystore_secret }}'
      -keystore '{{ app_cas_java_keystore_path }}'
      -dname 'CN=cas.example.org,OU=Example,OU=Org,C=US'
      -ext 'SAN=dns:example.org,dns:localhost,ip:127.0.0.1'
      -storetype 'PKCS12'
  args:
    creates: "{{ app_cas_java_keystore_path }}"

- name: Export the CAS SSL cert to a file using Java 11 keytool
  become_user: 'vagrant'
  ansible.builtin.command:
    cmd: >
      {{ java_11_keytool_path }}
      -exportcert
      -alias 'cas'
      -storepass '{{ app_cas_java_keystore_secret }}'
      -keystore '{{ app_cas_java_keystore_path }}'
      -file '{{ app_cas_java_cert_path }}'
  args:
    creates: "{{ app_cas_java_cert_path }}"

- name: Import the CAS SSL cert into the system Java 11 keystore
  community.general.java_cert:
    executable: '{{ java_11_keytool_path }}'
    keystore_create: true
    keystore_path: '{{ java_11_cacert_path }}'
    keystore_pass: '{{ java_cacert_password }}'
    cert_alias: 'cas'
    cert_path: '{{ app_cas_java_cert_path }}'
    trust_cacert: true
    state: present

# Ref: https://ubuntu.com/server/docs/security-trust-store
- name: Convert the CAS SSL cert from 'DER' into 'PEM' format
  become_user: 'vagrant'
  ansible.builtin.command:
    cmd: >
      /usr/bin/openssl
      x509 -inform der -outform pem
      -in '{{ app_cas_java_cert_path }}'
      -out '{{ app_cas_java_cert_pem_path }}'
  args:
    creates: "{{ app_cas_java_cert_pem_path }}"

- name: Copy the CAS SSL cert into the system CA directory
  ansible.builtin.copy:
    src: '{{ app_cas_java_cert_pem_path }}'
    dest: '/usr/local/share/ca-certificates/cas-ssl-cert.crt'
    remote_src: yes
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  register: app_cas_java_cert_pem_copied_result

- name: Import the CAS SSL cert into the system CA store
  ansible.builtin.command:
    cmd: update-ca-certificates
  when: app_cas_java_cert_pem_copied_result.changed

- name: Export the CAS SSL private key to 'PEM' file
  become_user: 'vagrant'
  ansible.builtin.command:
    cmd: >
      /usr/bin/openssl
      pkcs12
      -in '{{ app_cas_java_keystore_path }}'
      -passin 'pass:{{ app_cas_java_keystore_secret }}'
      -nodes
      -nocerts
      -out '{{ app_cas_java_key_pem_path }}'
  args:
    creates: "{{ app_cas_java_key_pem_path }}"

- name: Ensure correct file permissions
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'file'
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'
  loop:
    - '{{ app_cas_java_cert_pem_path }}'
    - '{{ app_cas_java_cert_path }}'

- name: Ensure correct file permissions
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'file'
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=,o='
  loop:
    - '{{ app_cas_java_key_pem_path }}'
    - '{{ app_cas_java_keystore_path }}'

# TODO: CAS must run before this to ensure the database tables are created.
- name: Update the authorised system ips to match the local system
  community.mysql.mysql_query:
    login_host: '{{ local_host }}'
    login_port: '{{ specified_ports.mysql_service_port }}'
    login_user: '{{ mysql_service_root_username }}'
    login_password: '{{ mysql_service_root_password }}'
    login_db: '{{ app_cas_mysql_db_main_database }}'
    single_transaction: true
    query:
      - "TRUNCATE TABLE `authorised_system`"
      - >
        INSERT INTO `authorised_system` (id, version, host, description)
        VALUES
        (NULL, 0, '127.0.0.1', 'localhost default')
        ,(NULL, 0, '127.0.1.1', 'localhost distro name')
        ,(NULL, 0, '127.0.2.1', 'localhost name')
        ,(NULL, 0, '10.0.2.2', 'loopback alias')
        {% for ip in ansible_facts['all_ipv4_addresses'] %}
        ,(NULL, 0, '{{ ip }}', 'local ip address {{ loop.index }}')
        {% endfor %}
        {% for container_info in docker_container_ips_result.stdout_lines %}{% if (container_info | split(" - ") | last | trim) %}
        ,(NULL, 0, '{{ container_info | split(" - ") | last | trim }}', 'docker ip for {{ container_info | split(" - ") | first | trim("/ ") }}')
        {% endif %}{% endfor %}

- name: Check cas services marker file
  ansible.builtin.stat:
    path: '{{ markers_dir }}/cas-services'
  register: create_cas_services_marker_result

- name: Template the cas services js file
  ansible.builtin.template:
    src: 'set-cas-services.js'
    dest: '{{ import_dir }}/set-cas-services.js'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'
  when: not create_cas_services_marker_result.stat.exists

- name: Update cas services mongo database
  ansible.builtin.command:
    cmd: >
      docker exec mongo_service sh -c
      'mongo
      --quiet
      --authenticationDatabase "{{ mongo_service_auth_database }}"
      --username "{{ app_cas_mongo_db_main_username }}"
      --password "{{ app_cas_mongo_db_main_password }}"
      "{{ app_cas_mongo_db_main_database }}"
      "{{ import_dir }}/set-cas-services.js"'
  changed_when: true
  when: not create_cas_services_marker_result.stat.exists

- name: Create cas services marker file
  ansible.builtin.file:
    path: '{{ markers_dir }}/cas-services'
    state: touch
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'
  when: not create_cas_services_marker_result.stat.exists
