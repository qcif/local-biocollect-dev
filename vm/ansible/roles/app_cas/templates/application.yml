---

# Examples:
# https://github.com/AtlasOfLivingAustralia/ala-install/tree/master/ansible/roles/cas5/templates
# https://github.com/AtlasOfLivingAustralia/ala-cas-5/blob/develop/etc/cas/config/application.yml
# https://github.com/AtlasOfLivingAustralia/ala-cas-5/blob/develop/src/main/resources/application.yml


{{ lookup("ansible.builtin.template", "shared-content.yml") }}

# --- Database ---

common_datasource_mysql_main_properties: &common_datasource_mysql_main_properties
  url: '{{ mysql_base_url }}/{{ app_cas_mysql_db_main_database }}?{{ mysql_default_uri_options }}'
  jdbcUrl: '{{ mysql_base_url }}/{{ app_cas_mysql_db_main_database }}?{{ mysql_default_uri_options }}'
  user: '{{ app_cas_mysql_db_main_username }}'
  password: '{{ app_cas_mysql_db_main_password }}'

common_database_mongo_main_properties: &common_database_mongo_main_properties
  <<: *shared_cas_mongo_defaults
  client-uri: 'mongodb://{{ app_cas_mongo_db_main_username }}:{{ app_cas_mongo_db_main_password }}@{{ web_base_host }}:{{ specified_ports.mongo_service_port }}/{{ app_cas_mongo_db_main_database }}?{{ mongo_default_uri_options }}'
  database-name: '{{ app_cas_mongo_db_main_database }}'
  user-id: '{{ app_cas_mongo_db_main_username }}'
  password: '{{ app_cas_mongo_db_main_password }}'

jndi:
  hikari:
    jdbccas:
      <<: *shared_datasource_mysql_defaults
      <<: *common_datasource_mysql_main_properties
      properties:
        dataSource.cachePrepStmts: true
        dataSource.prepStmtCacheSize: 250
        dataSource.prepStmtCacheSqlLimit: 2048

# --- Basic settings ---

info:
  description: '[Org Name Short] [Proj Name Short] [{{ app_cas_name }}] [dev]'
logging:
  config: 'file:{{ guest_src_dir }}/ala-cas-5/src/main/resources/log4j2.xml'

# --- Embedded web server ---

server:
  # The 'server.*' settings are for the embedded containers that ship with CAS.
  port: {{ specified_ports.cas_http_port }}
  forward-headers-strategy: native
  session:
    timeout: 86400
  ssl:
    enabled: false
    key-store: ''
  servlet:
    application-display-name: '[Org Name Short] [Proj Name Short] [{{ app_cas_name }}] [dev]'
    # NOTE: server.servlet.contextPath is appended to the nginx proxy_pass url, which might already have a trailing slash.
    # The slashes *cannot* be duplicated, so if the nginx proxy_pass has a trailing slash (which is significant to nginx),
    # this contextPath must not have a starting slash.
    # NOTE: CAS 6.x will fail if the context-path does not start with a slash.
    context-path: '/{{ app_cas_name }}'
    session:
      timeout: '8h'
  tomcat:
    accesslog:
      # see https://apereo.github.io/cas/6.6.x/installation/Configuring-Servlet-Container-Embedded-Tomcat.html#configuration
      enabled: true
    # see https://apereo.github.io/cas/6.6.x/installation/Configuring-Servlet-Container-Embedded-Tomcat.html#configuration
    # see https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#application-properties.server.server.tomcat.use-relative-redirects
    # Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.
    use-relative-redirects: false
    # see https://github.com/spring-projects/spring-boot/commit/28f7bc37a54f3705550a248be2bff67f5e788d2b
    # see https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.webserver.use-behind-a-proxy-server
    # Whether requests to the context root should be redirected by appending a / to the path.
    # When using SSL terminated at a proxy, this property should be set to false.
    redirect-context-root: false
    remoteip:
      # see https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#application-properties.server.server.tomcat.remoteip.host-header
      host-header: X-Forwarded-Host
      protocol-header: x-forwarded-proto
      port-header: x-forwarded-port
      remote-ip-header: x-forwarded-for
      protocol-header-https-value: https

# --- CAS settings ---

cas:

# --- CAS translation settings ---

  # https://apereo.github.io/cas/5.0.x/installation/Configuration-Properties.html#message-bundles
  # Allow to override messages locally via /var/opt/atlas/i18n/cas
  # In custom_messages only text messages to translate via crowdin
  messageBundle:
    baseNames: 'classpath:other_messages,classpath:custom_messages,classpath:messages'

# --- CAS server settings ---

  # see https://github.com/apereo/cas/blob/6.6.x/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/CasServerProperties.java
  server:
    # 'name': Full name of the CAS server. This is the public-facing address of the CAS deployment and not the individual node address.
    # e.g. https://cas.example.org:8443
    name: '{{ web_base_url }}'
    # 'prefix': A concatenation of the server name plus the CAS context path. Deployments at root likely need to blank out this value.
    # e.g. http://localhost/cas
    prefix: '{{ web_base_url }}/{{ app_cas_name }}'
    # 'scope': The CAS Server scope.
    # e.g. example.org
    scope: '{{ web_base_host }}'

    tomcat:
      # see https://github.com/apereo/cas/blob/v6.6.7/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/web/tomcat/CasEmbeddedApacheTomcatProperties.java
      # see https://apereo.github.io/cas/6.6.x/installation/Configuring-Servlet-Container-Embedded-Tomcat.html
      # The 'cas.server.tomcat.*' settings are to enable HTTP connections for the embedded Tomcat container,
      # *in addition* to the configuration linked to the 'server.port' setting.
      http-proxy:
        # see https://apereo.github.io/cas/6.6.x/installation/Configuring-Servlet-Container-Embedded-Tomcat.html#http--proxying
        enabled: true
        secure: false
        scheme: 'http'
        protocol: 'HTTP/1.1'
        proxy-port: {{ specified_ports.web_service_port }}
        redirect-port: {{ specified_ports.cas_http_port }}
      ssl-valve:
        enabled: false
  host:
    name: '{{ web_base_url }}'

# -- CAS http and CORS settings ---

  http-web-request:
    cors:
      enabled: true
      allow-credentials: true
      allow-origin-patterns:
        - '*'
      allow-origins: []
    header:
      xframe: false
      content-security-policy: "frame-ancestors 'self' 127.0.0.1;"

# --- CAS general database settings ---

  jdbc:
    # https://apereo.github.io/cas/6.6.x/monitoring/Configuring-Monitoring-JDBC.html (Hibernate & JDBC tab)
    show-sql: false

# --- CAS audit settings ---

  audit:
    # https://apereo.github.io/cas/6.6.x/audits/Audits-MongoDb.html
    mongo:
      <<: *common_database_mongo_main_properties
      collection: '{{ app_cas_mongo_db_main_collection_audit }}'

    engine:
      # https://apereo.github.io/cas/6.6.x/audits/Audits.html
      enabled: true
      alternate-client-addr-header-name: 'X-Forwarded-For'
      alternate-server-addr-header-name: 'X-Forwarded-Host'

# --- CAS authentication and authorisation settings ---
  authn:

    accept:
      # https://apereo.github.io/cas/6.6.x/authentication/Configuring-Authentication-Components.html#authentication-handlers
      enabled: false
      users: ''

    attribute-repository:
      # https://apereo.github.io/cas/6.6.x/integration/Attribute-Release-Policy-DefaultBundle.html
      core:
        expiration-time: 10
        expiration-time-unit: MINUTES
        maximum-cache-size: 1000
        aggregation: MERGE
        merger: REPLACE
        default-attributes-to-release: []
      jdbc:
        # https://apereo.github.io/cas/6.6.x/integration/Attribute-Resolution-JDBC.html
        - <<: *shared_datasource_mysql_defaults
          <<: *common_datasource_mysql_main_properties
          properties:
            dataSource.cachePrepStmts: true
            dataSource.prepStmtCacheSize: 250
            dataSource.prepStmtCacheSqlLimit: 2048
          requireAllAttributes: false
          # caseCanonicalization=NONE|LOWER|UPPER
          caseCanonicalization: NONE
          queryType: AND
          singleRow: false
          # TODO determine whether calling a stored proc is officially supported by the Apereo JDBC PersonDir
          sql: call sp_get_user_attributes(?);
          # username is not used because we don't use {0} in sql: above
          username: username
          # Used only when there is a mapping of many rows to one user
          columnMappings:
            key: value
          attributes:
            preferred_username: username
            username: username
            userid: userid
            id: id
            givenName: givenName
            firstname: firstname
            sn: sn
            lastname: lastname
            displayName: displayName
            email: email
            authority: authority
            role: role
            affiliation: affiliation
            organisation: organisation
            city: city
            state: state
            country: country
            activated: activated
            disabled: disabled
            expired: expired
            created: created
            last_updated: lastUpdated
            last_login: lastLogin

    throttle:
      # https://apereo.github.io/cas/6.6.x/authentication/Configuring-Authentication-Throttling.html
      failure:
        range-seconds: 10
        threshold: 5

    jdbc:
      # https://apereo.github.io/cas/6.6.x/authentication/Database-Authentication.html
      - <<: *shared_datasource_mysql_defaults
        <<: *common_datasource_mysql_main_properties
        sql: "SELECT p.password as password, not u.activated or u.locked as disabled, COALESCE(p.expiry < CURRENT_TIMESTAMP(), 0) as expired, FALSE as legacy_password FROM passwords p JOIN users u ON u.userid = p.userid AND p.status = 'CURRENT' AND p.type = 'bcrypt' WHERE u.username = ?;"
        fieldPassword: password
        fieldDisabled: disabled
        driverClass: com.mysql.cj.jdbc.Driver
        principalAttributeList: legacy_password:legacyPassword
        # principalAttributeList:sn,cn:commonName,givenName
        passwordEncoder:
          type: BCRYPT
          characterEncoding: UTF-8
          strength: 10
      - <<: *shared_datasource_mysql_defaults
        <<: *common_datasource_mysql_main_properties
        sql: "SELECT p.password as password, not u.activated or u.locked as disabled, COALESCE(p.expiry < CURRENT_TIMESTAMP(), 0) as expired, TRUE as legacy_password FROM passwords p JOIN users u ON u.userid = p.userid AND p.status = 'CURRENT' WHERE u.username = ?;"
        fieldPassword: password
        fieldDisabled: disabled
        driverClass: com.mysql.cj.jdbc.Driver
        principalAttributeList: legacy_password:legacyPassword
        passwordEncoder:
          type: au.org.ala.cas.password.AlaPasswordEncoder

# --- CAS as client / proxy using pac4j to delegate authentication ---

    pac4j:
      # https://apereo.github.io/cas/6.6.x/integration/Delegate-Authentication.html
      core:
        discovery-selection:
          # Indicate how the selection and presentation of identity providers would be controlled. Available values are as follows:
          #    MENU: Defined identity providers will be listed for the user to select.
          #    DYNAMIC: Defined identity providers are pre-built first, and one is chosen dynamically at runtime based on user attributes properties, domain identifier, etc.
          selection-type: MENU
        # When constructing the final user profile from the delegated provider,
        # determines if the provider id should be combined with the principal id.
        # ALA CAS modifications expect this to be true.
        typed-id-used: true
      oidc: []

      # cas.authn.pac4j: This is the place to register external auth providers (e.g. facebook, google, github, oidc)

# --- CAS OAuth settings ---

    oauth:
      # https://apereo.github.io/cas/6.6.x/authentication/OAuth-Authentication-Clients.html
      core:
        userProfileViewType: 'FLAT'
      crypto:
        enabled: true
        signing:
          key: '{{ app_cas_secret_oauth_signing }}'
        encryption:
          key: '{{ app_cas_secret_oauth_encryption }}'
      access-token:
        create-as-jwt: true
        maxTimeToLiveInSeconds: "PT24H"
        timeToKillInSeconds: "PT24H"
        crypto:
          enabled: true
          signing:
            key: '{{ app_cas_secret_access_signing }}'
          encryption:
            key: '{{ app_cas_secret_access_encryption }}'

      refresh-token:
        timeToKillInSeconds: "P14D"

# --- CAS OIDC provider settings ---

    oidc:
      # https://apereo.github.io/cas/6.6.x/authentication/OIDC-Authentication.html
      core:
        issuer: '{{ web_base_url }}/{{ app_cas_name }}/oidc'

      jwks:
        # https://apereo.github.io/cas/6.6.x/authentication/OIDC-Authentication-JWKS.html
        file-system:
          jwks-file: 'file:/home/vagrant/services/cas-keystore.jwks'

      discovery:
        # https://apereo.github.io/cas/6.6.x/authentication/OIDC-Authentication-Discovery.html
        scopes:
          - openid
          - profile
          - email
          - offline_access
          - ala
          - roles
          - ala/internal
          - users/read
          - users/write
          - profile-service/write
          - profile-service/read
          - doi/write
          - doi/read
          - image-service/write
          - image-service/read

# --- CAS JWT service ticket settings ---

    token:
      # https://apereo.github.io/cas/6.6.x/installation/Configure-ServiceTicket-JWT.html
      name: ''
      state: 'ACTIVE'
      crypto:
        enabled: true
        signing:
          key: '{{ app_cas_secret_token_signing }}'
        encryption:
          key: '{{ app_cas_secret_token_encryption }}'

# --- CAS health monitoring settings ---

  monitor:
    # https://apereo.github.io/cas/6.6.x/monitoring/Configuring-Monitoring.html
    jdbc:
      driver-class: 'com.mysql.cj.jdbc.Driver'
      <<: *common_datasource_mysql_main_properties
    mongo:
      - <<: *common_database_mongo_main_properties

# --- CAS service registry settings ---

  service-registry:
    # https://apereo.github.io/cas/6.6.x/services/Service-Management.html
    core:
      # https://apereo.github.io/cas/6.6.x/services/AutoInitialization-Service-Management.html
      init-from-json: true
    json:
      location: file:/data/cas/services
    mongo:
      # https://apereo.github.io/cas/6.6.x/services/MongoDb-Service-Management.html
      <<: *common_database_mongo_main_properties
      collection: '{{ app_cas_mongo_db_main_collection_services }}'

# --- CAS ticket registry settings ---

  ticket:
    tgt:
      # https://apereo.github.io/cas/6.6.x/ticketing/Configuring-Ticket-Expiration-Policy.html
      primary:
        # Maximum time in seconds tickets would be live in CAS server.
        max-time-to-live-in-seconds: 28800  # 8 hours
        # Time in seconds after which tickets would be destroyed after a period of inactivity.
        time-to-kill-in-seconds: 7200  # 2 hours
      # most-recently-used expiration policy
      timeout:
        # Most recently used timeout. Maximum time in seconds. for TGTs to be live in CAS server.
        max-time-to-live-in-seconds: 28800  # 8 hours
      # finite ticket lifetime as measured from the time of creation
      hard-timeout:
        # Timeout in seconds to kill the session and consider tickets expired.
        time-to-kill-in-seconds: 36000  # 10 hours
      # throttling where a ticket may be used, at most, every N seconds
      throttled-timeout:
        # Timeout in between each attempt.
        time-in-between-uses-in-seconds: 10
        # Timeout in seconds to kill the session and consider tickets expired.
        time-to-kill-in-seconds: 36000  # 10 hours
      # remember me (tick box) to allow longer session timeout
      remember-me:
        enabled: true
        # Timeout in seconds to kill the session and consider tickets expired.
        # 86400 seconds = 1 day
        time-to-kill-in-seconds: 86400
    registry:
      # https://apereo.github.io/cas/6.6.x/ticketing/Configuring-Ticketing-Components.html
      cleaner:
        schedule:
          enabled: true
      mongo:
        # https://apereo.github.io/cas/6.6.x/ticketing/MongoDb-Ticket-Registry.html
        <<: *common_database_mongo_main_properties
        crypto:
          enabled: true
          signing:
            key: '{{ app_cas_secret_ticket_signing }}'
          encryption:
            key: '{{ app_cas_secret_ticket_encryption }}'
    st:
      time-to-kill-in-seconds: 10

# -- CAS long term / remember me authentication settings ---

  tgc:
    # https://apereo.github.io/cas/6.6.x/authentication/Configuring-LongTerm-Authentication.html
    # If remember-me is enabled, specifies the maximum age of the cookie
    remember-me-max-age: 86400
    max-age: 86400
    http-only: true
    same-site-policy: 'Strict'
    secure: true
    crypto:
      enabled: true
      encryption:
        key: '{{ app_cas_secret_tgc_signing }}'
      signing:
        key: '{{ app_cas_secret_tgc_encryption }}'

# --- CAS Spring webflow settings ---

  webflow:
    # https://apereo.github.io/cas/6.6.x/webflow/Webflow-Customization-Sessions.html
    crypto:
      signing:
        key: '{{ app_cas_secret_webflow_signing }}'
      encryption:
        key: '{{ app_cas_secret_webflow_encryption }}'

# --- CAS person directory settings ---

  person-directory:
    # https://apereo.github.io/cas/6.6.x/integration/Attribute-Resolution.html
    return-null: true

# --- ALA settings ---

debug: false
supportEmail: '[Org Support Email]'

ala:
  userDetailsBaseUrl: '{{ web_base_url }}/{{ app_userdetails_name }}/'
  baseURL: '{{ web_base_url }}/{{ app_cas_name }}'
  userDetailsURL: '{{ web_base_url }}/{{ app_userdetails_name }}/userDetails/getUserListFull'
  supportEmail: '[Org Support Email]'

# --- ALA cookie settings ---

  cookie:
    domain: '{{ web_base_authority }}'
    httpOnly: true
    # maxAge of 86400 seconds is 1 day
    maxAge: 86400
    rememberMeMaxAge: 86400
    name: 'ALA-Auth'
    path: '/'
    secure: true
    sameSitePolicy: 'Lax'
    quoteValue: true
    urlEncodeValue: false

# --- ALA user creation settings ---

  userCreator:
    defaultCountry: 'AU'
    countriesListUrl: '{{ web_base_url }}/{{ app_userdetails_name }}/ws/registration/countries'
    statesListUrl: '{{ web_base_url }}/{{ app_userdetails_name }}/ws/registration/states'

    userCreatePassword: "{{ app_cas_ala_user_create_password }}"
    enableUserSurvey: false

    passwordEncoder:
      # This should be the same as the primary password encoder
      type: BCRYPT
      characterEncoding: UTF-8
      strength: 10
    jdbc:
      <<: *shared_datasource_mysql_defaults
      <<: *common_datasource_mysql_main_properties
      enableUpdateLastLoginTime: true
      enableRequestExtraAttributes: true
      enableUpdateLegacyPasswords: true
      properties:
        dataSource.cachePrepStmts: true
        dataSource.prepStmtCacheSize: 250
        dataSource.prepStmtCacheSqlLimit: 2048

# --- Theme and skin ---

  skin:
    <<: *shared_skin_defaults
    baseUrl: '{{ web_base_url }}/{{ app_theme_name }}'
    termsUrl: '{{ app_theme_custom_url }}'
    headerFooterUrl: '{{ web_base_url }}/{{ app_theme_name }}/'
    favIconBaseUrl: '{{ web_base_url }}/{{ app_theme_name }}/img/'
    loginBrandUrl: '{{ web_base_url }}/{{ app_theme_name }}/img/brand-logo.png'
    loginLogo: '{{ web_base_url }}/{{ app_theme_name }}/img/brand-logo.png'
    bieBaseUrl: '{{ app_theme_custom_url }}'
    bieSearchPath: '/{{ app_theme_name }}/custom_link.html'
    userDetailsUrl: '{{ web_base_url }}/{{ app_userdetails_name }}'
    resetPasswordUrl: '{{ web_base_url }}/{{ app_userdetails_name }}/registration/forgottenPassword'
    createAccountUrl: '{{ web_base_url }}/{{ app_userdetails_name }}/registration/createAccount'
    orgShortName: '[Org Name Short] [Proj Name Short]'
    orgLongName: '[Org Name Long] [Proj Name Long]'
    orgNameKey: 'org-name-code'
    loginFormUserPass: true
    cacheDuration: PT30m
    supportEmail: '[Org Support Email]'
    ui-version: 2

# --- Spring ---

spring:
  main:
    allow-bean-definition-overriding: true

  flyway: &common_spring_flyway_properties
    enabled: true
    baselineOnMigrate: true
    baselineVersion: 1
    table: schema_version
    <<: *shared_datasource_mysql_defaults
    <<: *common_datasource_mysql_main_properties

  session:
    enabled: true
    store-type: mongodb
    mongo:
      collectionName: sessions_cas

  data:
    mongodb:
      uri: 'mongodb://{{ app_cas_mongo_db_spring_data_username }}:{{ app_cas_mongo_db_spring_data_password }}@{{ web_base_host }}:{{ specified_ports.mongo_service_port }}/{{ app_cas_mongo_db_spring_data_database }}?{{ mongo_default_uri_options }}'
      host: '{{ web_base_host }}'
      port: {{ specified_ports.mongo_service_port }}
      username: '{{ app_cas_mongo_db_spring_data_username }}'
      password: '{{ app_cas_mongo_db_spring_data_password }}'
      database: '{{ app_cas_mongo_db_spring_data_database }}'
