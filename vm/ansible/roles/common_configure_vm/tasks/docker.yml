---

# docker

- name: Add docker group
  ansible.builtin.group:
    name: 'docker'
    state: 'present'

- name: Add vagrant to docker group
  ansible.builtin.user:
    name: 'vagrant'
    groups: 'docker'
    append: true

- name: Enable docker service and start at boot
  ansible.builtin.systemd:
    name: '{{ item }}'
    state: 'started'
    enabled: true
  loop:
    - 'docker'
    - 'containerd'
  notify:
    - Systemd daemon reload

# docker compose

- name: Template docker-compose file
  ansible.builtin.template:
    src: '{{ docker_compose_file }}'
    dest: '{{ docker_compose_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'

- name: Template the mysql docker entrypoint file
  ansible.builtin.template:
    src: '{{ mysql_service_entrypoint_file }}'
    dest: '{{ mysql_service_entrypoint_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rwx,g=rx,o=rx'

- name: Update docker containers
  ansible.builtin.command:
    cmd: docker compose -f "{{ docker_compose_path }}" --ansi never pull
  changed_when: true

- name: Start docker-compose services so can obtain ips
  ansible.builtin.command:
    cmd: 'docker compose -f {{ docker_compose_path }} --ansi never up --detach --remove-orphans --quiet-pull --no-color'
  register: docker_compose_up_result
  changed_when: "' Creat' in docker_compose_up_result.stdout or ' Start' in docker_compose_up_result.stdout"

- name: Give the docker containers a chance to start up
  ansible.builtin.wait_for:
    timeout: 15
  delegate_to: localhost
  when: "' Creat' in docker_compose_up_result.stdout or ' Start' in docker_compose_up_result.stdout"

# Other things tried, which had problems:
# - ansible.utils.cli_parse: Almost works,
#   except it has an odd bug where container ids that look like scientific number notation are parsed into numbers??
#   A container name like '5e8818292388' might be parsed as a scientific notation number,
#   leading to 'Infinity' or 'inf'.
# - community.docker.docker_compose: requires the PyPI package 'docker-compose', which is very hard to install.

# Instead, manually parse the docker command output.

- name: Get all docker container ids
  ansible.builtin.command:
    cmd: 'docker ps -aq'
  register: docker_container_ids_result

- name: Show information
  ansible.builtin.debug:
    var: docker_container_ids_result

- name: Get all docker container ip addresses
  ansible.builtin.command:
    cmd: "docker inspect -f {% raw %}'{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'{% endraw %} {% for container_id in docker_container_ids_result.stdout_lines %}{{ container_id }} {% endfor %}"
  register: docker_container_ips_result

- name: Show information
  ansible.builtin.debug:
    var: docker_container_ips_result

# TODO: use docker container ip addresses to allow access in userdetails authorised systems
