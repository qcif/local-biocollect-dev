---

- name: Create directories
  ansible.builtin.file:
    path: '{{ item }}'
    state: 'directory'
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rwx,g=rx,o=rx'
  loop:
    - '{{ app_userdetails_config_dir }}'

- name: Template the bash functions file
  ansible.builtin.template:
    src: 'helpers.sh'
    dest: '{{ app_userdetails_helper_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  vars:
    entry_name: '{{ app_userdetails_name }}'
    entry_java: '{{ app_userdetails_java }}'
    entry_builder: '{{app_userdetails_builder }}'
    entry_working_dir: '{{ app_userdetails_source_dir }}'
    entry_java_opts: '{{ app_userdetails_java_opts }}'
    entry_env_vars: '{{ app_userdetails_env_vars }}'
    entry_java_artifact_name: 'build/libs/userdetails-*-exec.war'
    entry_is_service: true

- name: Template the nginx conf
  ansible.builtin.template:
    src: 'entry-nginx.conf'
    dest: '{{ app_userdetails_entry_nginx_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  vars:
    entry_name: '{{ app_userdetails_name }}'
    entry_ports: '{{ app_userdetails_ports }}'
    entry_working_dir: '{{ app_userdetails_source_dir }}'

- name: Template the nginx html
  ansible.builtin.template:
    src: 'entry-index.html'
    dest: '{{ app_userdetails_entry_html_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'
  vars:
    entry_group: '{{ app_userdetails_group }}'
    entry_category: '{{ app_userdetails_category }}'
    entry_name: '{{ app_userdetails_name }}'
    entry_ports: '{{ app_userdetails_ports }}'
    entry_links: '{{ app_userdetails_links }}'

- name: Template the systemd unit file
  ansible.builtin.template:
    src: 'app-systemd.service'
    dest: '{{ app_userdetails_systemd_service_path }}'
    force: true
    backup: false
    owner: 'root'
    group: 'root'
    mode: 'u=rw,g=r,o=r'
  notify:
    - Systemd daemon reload
  vars:
    entry_name: '{{ app_userdetails_name }}'
    entry_java: '{{ app_userdetails_java }}'
    entry_working_dir: '{{ app_userdetails_source_dir }}'
    entry_builder: '{{app_userdetails_builder }}'
    entry_java_opts: '{{ app_userdetails_java_opts }}'
    entry_env_vars: '{{ app_userdetails_env_vars }}'
    entry_debug_port: '{{ specified_ports.userdetails_debug_port }}'

- name: Template the config file
  ansible.builtin.template:
    src: 'application.yml'
    dest: '{{ app_userdetails_config_path }}'
    force: true
    backup: false
    owner: 'vagrant'
    group: 'vagrant'
    mode: 'u=rw,g=r,o=r'

- name: Ensure mysql databases exist
  community.mysql.mysql_db:
    login_host: '{{ local_host }}'
    login_port: '{{ specified_ports.mysql_service_port }}'
    login_user: '{{ mysql_service_root_username }}'
    login_password: '{{ mysql_service_root_password }}'
    name: '{{ item }}'
    state: 'present'
  loop:
    - '{{ app_userdetails_db_main_database }}'
    - '{{ app_userdetails_db_test_database }}'

- name: Ensure mysql users exist
  community.mysql.mysql_user:
    login_host: '{{ local_host }}'
    login_port: '{{ specified_ports.mysql_service_port }}'
    login_user: '{{ mysql_service_root_username }}'
    login_password: '{{ mysql_service_root_password }}'
    name: '{{ item.username }}'
    host: '%'
    plugin: 'caching_sha2_password'
    plugin_auth_string: '{{ item.password }}'
    priv: '{{ item.database }}.*:ALL'
    column_case_sensitive: true
    state: 'present'
  loop:
    - database: '{{ app_userdetails_db_main_database }}'
      username: '{{ app_userdetails_db_main_username }}'
      password: '{{ app_userdetails_db_password }}'
    - database: '{{ app_userdetails_db_test_database }}'
      username: '{{ app_userdetails_db_test_username }}'
      password: '{{ app_userdetails_db_test_password }}'

- name: Ensure mongodb users exist and can access mongodb databases
  community.mongodb.mongodb_user:
    login_database: '{{ mongo_service_auth_database }}'
    login_host: '{{ local_host }}'
    login_password: "{{ mongo_service_root_password }}"
    login_port: '{{ specified_ports.mongo_service_port }}'
    login_user: '{{ mongo_service_root_username }}'
    auth_mechanism: '{{ mongo_service_auth_mechanism }}'
    database: '{{ mongo_service_auth_database }}'
    name: '{{ item.user }}'
    password: "{{ item.pass }}"
    roles: '{{ item.roles }}'
    state: present
  loop:
    - database: "{{ app_userdetails_db_spring_data_database }}"
      user: "{{ app_userdetails_db_spring_data_username }}"
      pass: "{{ app_userdetails_db_spring_data_password }}"
      roles:
        - db: '{{ app_userdetails_db_spring_data_database }}'
          role: 'readWrite'
